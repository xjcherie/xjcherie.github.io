---
layout: post
title:  "1. 两数之和"
date:   2020-2-20 20:00:00
categories: 算法
---
题目描述

    给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。
    你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。
    你可以按任意顺序返回答案。
    
    示例:
        输入：nums = [2,7,11,15], target = 9
        输出：[0,1]
        解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。

    提示:
        2 <= nums.length <= 103
        -109 <= nums[i] <= 109
        -109 <= target <= 109
        只会存在一个有效答案

#### 解题思路
暴力破解，循环遍历两次数组
```java
public class TwoSum {

    public int[] twoSum(int[] nums, int target) {
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[i] + nums[j] == target) {
                    return new int[]{i, j};
                }
            }
        }
        return null;
    }

}
```

#### 官方解答
方法一：暴力枚举
与我的解法相同，细节上的差别在于：单独定义了数组长度、返回了空数组。
时间复杂度：O(N^2)
空间复杂度：O(1)
```java
public int[] twoSum(int[] nums, int target) {
    int n = nums.length;
    for (int i = 0; i < n; ++i) {
        for (int j = i + 1; j < n; ++j) {
            if (nums[i] + nums[j] == target) {
                return new int[]{i, j};
            }
        }
    }
    return new int[0];
}
```

方法二：哈希表
对暴力枚举的改进，将里边的一层循环交给了哈希表，由哈希表来判断是否存在符合条件的值。
时间复杂度：O(N)
空间复杂度：O(N)
```java
public int[] twoSum(int[] nums, int target) {
    Map<Integer, Integer> hashtable = new HashMap<Integer, Integer>();
    for (int i = 0; i < nums.length; ++i) {
        if (hashtable.containsKey(target - nums[i])) {
            return new int[]{hashtable.get(target - nums[i]), i};
        }
        hashtable.put(nums[i], i);
    }
    return new int[0];
}
```

#### 小结
数组遍历找目标值（未涉及数组元素的移动）


leetcode原题链接：[1. 两数之和](https://leetcode.com/problems/two-sum/)